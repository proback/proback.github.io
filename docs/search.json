[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Paul Roback",
    "section": "",
    "text": "Professor of Statistics and Data Science  MSCS Department @ St. Olaf College\n\n\nPhD in Statistics 1998 | Colorado State University\nMS in Statistics 1991 | Iowa State University\nBA in Math and Economics with Statistics concentration 1989 | St. Olaf College"
  },
  {
    "objectID": "index.html#paul-roback",
    "href": "index.html#paul-roback",
    "title": "Paul Roback",
    "section": "",
    "text": "Professor of Statistics and Data Science  MSCS Department @ St. Olaf College\n\n\nPhD in Statistics 1998 | Colorado State University\nMS in Statistics 1991 | Iowa State University\nBA in Math and Economics with Statistics concentration 1989 | St. Olaf College"
  },
  {
    "objectID": "02_maps.html",
    "href": "02_maps.html",
    "title": "Creating informative maps",
    "section": "",
    "text": "You can download this .qmd file from here. Just hit the Download Raw File button.\n\n# Initial packages required (we'll be adding more)\nlibrary(tidyverse)\nlibrary(mdsr)      # package associated with our MDSR book\n\n\nChoropleth Maps\nWhen you have specific regions (e.g. countries, states, counties, census tracts,…) and a value associated with each region.\nA choropleth map will color the entire region according to the value. For example, let’s consider state vaccination data from March 2021.\n\nvaccines &lt;- read_csv(\"https://proback.github.io/264_fall_2024/Data/vacc_Mar21.csv\") \n\nvacc_mar13 &lt;- vaccines |&gt;\n  filter(Date ==\"2021-03-13\") |&gt;\n  select(State, Date, people_vaccinated_per100, share_doses_used, Governor)\n\nvacc_mar13\n\n# A tibble: 50 × 5\n   State       Date       people_vaccinated_per100 share_doses_used Governor\n   &lt;chr&gt;       &lt;date&gt;                        &lt;dbl&gt;            &lt;dbl&gt; &lt;chr&gt;   \n 1 Alabama     2021-03-13                     17.2            0.671 R       \n 2 Alaska      2021-03-13                     27.0            0.686 R       \n 3 Arizona     2021-03-13                     21.5            0.821 R       \n 4 Arkansas    2021-03-13                     19.2            0.705 R       \n 5 California  2021-03-13                     20.3            0.726 D       \n 6 Colorado    2021-03-13                     20.8            0.801 D       \n 7 Connecticut 2021-03-13                     26.2            0.851 D       \n 8 Delaware    2021-03-13                     20.2            0.753 D       \n 9 Florida     2021-03-13                     20.1            0.766 R       \n10 Georgia     2021-03-13                     15.2            0.674 R       \n# ℹ 40 more rows\n\n\nThe tricky part of choropleth maps is getting the shapes (polygons) that make up the regions. This is really a pretty complex set of lines for R to draw!\nLuckily, some maps are already created in R in the maps package.\n\nlibrary(maps)\nus_states &lt;- map_data(\"state\")\nhead(us_states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\nus_states |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(fill = \"white\", color = \"black\")\n\n\n\n\n\n\n\n\n\nvacc_mar13 &lt;- vacc_mar13 |&gt;\n  mutate(State = str_to_lower(State))\n\nvacc_mar13 &lt;- vacc_mar13 |&gt;\n  mutate(State = str_replace(State, \" state\", \"\"))\n\n\nlibrary(viridis) # for color schemes\nvacc_mar13 |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = people_vaccinated_per100), color = \"black\") + \n  labs(fill = \"People Vaccinated\\nper 100 pop.\") +\n1  coord_map() +\n2  theme_void() +\n3  scale_fill_viridis()\n\n\n1\n\nThis scales the longitude and latitude so that the shapes look correct. coord_quickmap() can also work here - it’s less exact but faster.\n\n2\n\nThis theme can give you a really clean look\n\n3\n\nYou can change the fill scale for different color schemes.\n\n\n\n\n\n\n\n\n\n\n\nYou can also use a categorical variable to color regions:\n\nvacc_mar13 |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = Governor), color = \"darkgrey\", linewidth = 0.2) + \n  labs(fill = \"Governor\") +\n  coord_map() + \n  theme_void() +  \n1  scale_fill_manual(values = c(\"blue\", \"red\"))\n\n\n1\n\nYou can change the fill scale for different color schemes.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple maps!\nYou can still use data viz tools from Data Science 1 (like facetting) to create things like time trends in maps:\n\nlibrary(lubridate)\nweekly_vacc &lt;- vaccines |&gt;\n  mutate(State = str_to_lower(State)) |&gt;\n  mutate(State = str_replace(State, \" state\", \"\"),\n         week = week(Date)) |&gt;\n  group_by(week, State) |&gt;\n  summarize(date = first(Date),\n            mean_daily_vacc = mean(daily_vaccinated/est_population*1000)) |&gt;\n  right_join(us_states, by =c(\"State\" = \"region\")) |&gt;\n  rename(region = State)\n\nweekly_vacc |&gt;\n  filter(week &gt; 2, week &lt; 11) |&gt;\n  ggplot(mapping = aes(x = long, y = lat,\n                          group = group)) + \n  geom_polygon(aes(fill = mean_daily_vacc), color = \"darkgrey\", \n               linewidth = 0.1) + \n  labs(fill = \"Weekly Average Daily Vaccinations per 1000\") +\n  coord_map() + \n  theme_void() + \n  scale_fill_viridis() + \n  facet_wrap(~date) + \n  theme(legend.position = \"bottom\") \n\n\n\n\n\n\n\n\n\n\nOther cool state maps\n\nstatebin (square representation of states)\n\nlibrary(statebins) # may need to install\n\nvacc_mar13 |&gt;\n  mutate(State = str_to_title(State)) |&gt;\n  statebins(state_col = \"State\",\n            value_col = \"people_vaccinated_per100\") + \n1  theme_statebins() +\n  labs(fill = \"People Vaccinated per 100\")\n\n\n1\n\nOne nice layout. You can customize with usual ggplot themes.\n\n\n\n\n\n\n\n\n\n\n\nI used this example to create the code above. The original graph is located here.\n\n\n\nInteractive point maps with leaflet\nTo add even more power and value to your plots, we can add interactivity. For now, we will use the leaflet package, but later in the course we will learn even more powerful and flexible approaches for creating interactive plots and webpages.\nFor instance, here is a really simple plot with a pop-up window:\n\nlibrary(leaflet)\n\nleaflet() |&gt; \n1  addTiles() |&gt;\n2  setView(-93.1832, 44.4597, zoom = 17) |&gt;\n3  addPopups(-93.1832, 44.4597, 'Here is the &lt;b&gt;Regents Hall of Mathematical Sciences&lt;/b&gt;, home of the Statistics and Data Science program at St. Olaf College')\n\n\n1\n\naddTiles() uses OpenStreetMap, an awesome open-source mapping resource, as the default tile layer (background map)\n\n2\n\nsetView() centers the map at a specific latitude and longitude, then zoom controls how much of the surrounding area is shown\n\n3\n\nadd a popup message (with html formatting) that can be clicked on or off\n\n\n\n\n\n\n\n\nLeaflet is not part of the tidyverse, but the structure of its code is pretty similar and it also plays well with piping.\nLet’s try pop-up messages with a data set containing Airbnb listings in the Boston area:\n\nleaflet() |&gt;\n    addTiles() |&gt;\n    setView(lng = mean(airbnb.df$Long), lat = mean(airbnb.df$Lat), \n            zoom = 13) |&gt; \n    addCircleMarkers(data = airbnb.df,\n        lat = ~ Lat, \n        lng = ~ Long, \n        popup = ~ AboutListing, \n        radius = ~ S_Accomodates,  \n        # These last options describe how the circles look\n        weight = 2,\n        color = \"red\", \n        fillColor = \"yellow\")\n\n\n\n\n\n\n\nInteractive choropleth maps with leaflet\n\nA preview to shapefiles and the sf package\n\n1library(sf)\n2states &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\n3class(states)\nstates\n\n\n1\n\nsf stands for “simple features”\n\n2\n\nFrom https://leafletjs.com/examples/choropleth/us-states.js\n\n3\n\nNote that states has class sf in addition to the usual tbl and df\n\n\n\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\nSimple feature collection with 52 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -188.9049 ymin: 17.92956 xmax: -65.6268 ymax: 71.35163\nGeodetic CRS:  WGS 84\n# A tibble: 52 × 4\n   id    name                  density                                  geometry\n   &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt;                        &lt;MULTIPOLYGON [°]&gt;\n 1 01    Alabama                 94.6  (((-87.3593 35.00118, -85.60667 34.98475…\n 2 02    Alaska                   1.26 (((-131.602 55.11798, -131.5692 55.28229…\n 3 04    Arizona                 57.0  (((-109.0425 37.00026, -109.048 31.33163…\n 4 05    Arkansas                56.4  (((-94.47384 36.50186, -90.15254 36.4963…\n 5 06    California             242.   (((-123.2333 42.00619, -122.3789 42.0116…\n 6 08    Colorado                49.3  (((-107.9197 41.00391, -105.729 40.99843…\n 7 09    Connecticut            739.   (((-73.05353 42.03905, -71.79931 42.0226…\n 8 10    Delaware               464.   (((-75.41409 39.80446, -75.5072 39.68396…\n 9 11    District of Columbia 10065    (((-77.03526 38.99387, -76.90929 38.8952…\n10 12    Florida                353.   (((-85.49714 30.99754, -85.00421 31.0030…\n# ℹ 42 more rows\n\n\nFirst we’ll start with a static plot using a simple features object and geom_sf():\n\n# Create density bins as on the webpage\nstate_plotting_sf &lt;- states |&gt;\n  mutate(density_intervals = cut(density, n = 8,\n          breaks = c(0, 10, 20, 50, 100, 200, 500, 1000, Inf))) |&gt;\n  filter(!(name %in% c(\"Alaska\", \"Hawaii\", \"Puerto Rico\")))\n\nggplot(data = state_plotting_sf) + \n  geom_sf(aes(fill = density_intervals), colour = \"white\", linetype = 2) + \n#  geom_sf_label(aes(label = density)) +   # labels too busy here\n  theme_void() +  \n  scale_fill_brewer(palette = \"YlOrRd\") \n\n\n\n\n\n\n\n\nNow let’s use leaflet to create an interactive plot!\n\n# Create our own category bins for population densities\n#   and assign the yellow-orange-red color palette\nbins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = states$density, bins = bins)\n\n# Create labels that pop up when we hover over a state.  The labels must\n#   be part of a list where each entry is tagged as HTML code.\nlibrary(htmltools)\nlibrary(glue)\n\nstates &lt;- states |&gt;\n  mutate(labels = str_c(name, \": \", density, \" people / sq mile\"))\n\n# If want more HTML formatting, use these lines instead of those above:\n#states &lt;- states |&gt;\n#  mutate(labels = glue(\"&lt;strong&gt;{name}&lt;/strong&gt;&lt;br/&gt;{density} people / #mi&lt;sup&gt;2&lt;/sup&gt;\"))\n\nlabels &lt;- lapply(states$labels, HTML)\n\nleaflet(states) %&gt;%\n  setView(-96, 37.8, 4) %&gt;%\n  addTiles() %&gt;%\n  addPolygons(\n    fillColor = ~pal(density),\n    weight = 2,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) %&gt;%\n  addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,\n    position = \"bottomright\")"
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "Courses",
    "section": "",
    "text": "Fall 2024\n\nSDS 264: Data Science 2 course website\nSDS 172: Statistics 1"
  }
]